
#Область РазделОписанияПеременных

Перем мНастройкаУзлаОбмена								Экспорт;
Перем мНастройкаКатегорииОбъектовВыгрузкиВГостинницу 	Экспорт;
Перем мНастройкаерархияОбъектовВыборкиПодразделения 	Экспорт;

Перем мТекущаяНастройка 								Экспорт;
Перем мВосстанавливатьНастройкиПриОткрытии 				Экспорт;
Перем мНазваниеОтчета 									Экспорт;

Перем мТекущийПользователь								Экспорт;
Перем мРегламентнаяНастройка 							Экспорт;

#КонецОбласти

#Область ФункцииИнтерактивнойРаботы

// Процедура - УстановкаЗначенийЗапуска
//
// Параметры:
//  Форма		- Форма	 - Форма
//  ИмяОбъекта	- Строка	 - Имя объекта
//  РежимЗапуска - Строка - режим запуска обработки
Процедура УстановкаЗначенийЗапуска(Форма, ИмяОбъекта = Неопределено, РежимЗапуска = "Интерактивный") Экспорт
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь"			, мРегламентнаяНастройка.Пользователь);
	СтруктураНастройки.Вставить("ИмяОбъекта"			, ?(ИмяОбъекта = Неопределено, Строка(ЭтотОбъект), ИмяОбъекта));
	СтруктураНастройки.Вставить("НаименованиеНастройки"	, "НастройкаРегламентногоЗадания");
	
	Результат = УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки);
	
	Если Результат Тогда
		ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
		УстановитьНачальныеНастройки("Интерактивный", СтруктураНастройки);
	КонецЕсли;
	
КонецПроцедуры // УстановкаЗначенийЗапуска()

// Процедура - Форма при закрытии
//
// Параметры:
//  Форма		 - Форма	 - Форма
//  ИмяОбъекта	 - Строка	 - Имя объекта
//
Процедура ФормаПриЗакрытии(Форма, ИмяОбъекта = Неопределено) Экспорт
	
	Перем СохраненнаяНастройка;
	
	Если мТекущаяНастройка <> Неопределено И мТекущаяНастройка.НаименованиеНастройки <> Неопределено 
		И мТекущаяНастройка.Свойство("СохранятьАвтоматически") И мТекущаяНастройка.СохранятьАвтоматически Тогда
		
		СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
		
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Пользователь"				, мРегламентнаяНастройка.мТекущийПользователь);
		СтруктураНастройки.Вставить("ИмяОбъекта"				, ?(ИмяОбъекта = Неопределено, Строка(ЭтотОбъект), ИмяОбъекта));
		СтруктураНастройки.Вставить("НаименованиеНастройки"		, мТекущаяНастройка.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка"		, СохраненнаяНастройка);
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии"	, мТекущаяНастройка.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически"	, мТекущаяНастройка.СохранятьАвтоматически);
		
		УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки);
	КонецЕсли;
	
КонецПроцедуры // ФормаПриЗакрытии()

// Процедура - Установить заголовок формы
//
// Параметры:
//  Форма	 - Форма	 - Форма
//
Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Если мТекущаяНастройка <> Неопределено И мТекущаяНастройка.Свойство("НаименованиеНастройки") 
		И мТекущаяНастройка.НаименованиеНастройки <> Неопределено Тогда
		
		Форма.Заголовок = мНазваниеОтчета + ". Настройка: " + СокрЛП(мТекущаяНастройка.НаименованиеНастройки);
	Иначе
		Форма.Заголовок = мНазваниеОтчета;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

#КонецОбласти

#Область ПроцедурыРаботысИнтерактивнымиНастройками

// Справочник - СтатьиЗатрат
Процедура УстановитьНачальныеНастройки_ТЧ1(ДополнительныеПараметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатьиЗатратИзменения.Ссылка
	|ПОМЕСТИТЬ СтатьиЗатратИзменения
	|ИЗ
	|	Справочник.СтатьиЗатрат.Изменения КАК СтатьиЗатратИзменения
	|ГДЕ
	|	СтатьиЗатратИзменения.Узел = &Узел
	|	И &РежимЗапуска = ""Регламент""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка,
	|	""2"" КАК ТипСправочника,
	|	СтатьиЗатрат.Код,
	|	СтатьиЗатрат.Наименование,
	|	СтатьиЗатрат.Родитель.Код КАК КодРодителя,
	|	ВЫБОР
	|		КОГДА СтатьиЗатрат.ПометкаУдаления
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ПометкаУдаления
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РежимЗапуска <> ""Регламент""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СтатьиЗатрат.Ссылка В
	|					(ВЫБРАТЬ
	|						СтатьиЗатратИзменения.Ссылка
	|					ИЗ
	|						СтатьиЗатратИзменения КАК СтатьиЗатратИзменения)
	|		КОНЕЦ
	|{ГДЕ
	|	СтатьиЗатрат.Ссылка.*}";

	ПостроительОтчета_ТЧ1.Текст = ТекстЗапроса;	
	ПостроительОтчета_ТЧ1.ЗаполнитьНастройки();
	ПостроительОтчета_ТЧ1.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета_ТЧ1.ТекстЗаголовка = "Отчет";
	
	Для Каждого СтрокаДоступныеПоля Из ПостроительОтчета_ТЧ1.ДоступныеПоля Цикл
		Если СтрокаДоступныеПоля.Имя 			= "ОписаниеОшибки" Тогда
			СтрокаДоступныеПоля.Представление 	= "Описание ошибки"
			
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПоляОтбора = ПостроительОтчета_ТЧ1.Отбор.ПолучитьДоступныеПоля();
	
	Отбор = ПостроительОтчета_ТЧ1.Отбор;
	
	Индекс = 0;
	Пока Индекс < ДоступныеПоляОтбора.Количество() Цикл
		СтрокаДоступныеПоляОтбора = ДоступныеПоляОтбора[Индекс];
		
		Если СтрокаДоступныеПоляОтбора.Имя = "Ссылка" Тогда
			Если Отбор.Найти("Ссылка") = Неопределено Тогда
				Отбор.Добавить(СтрокаДоступныеПоляОтбора.Имя, , "Статья затрат");
			КонецЕсли;
			Индекс = Индекс + 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Справочник - Подразделения
Процедура УстановитьНачальныеНастройки_ТЧ2(ДополнительныеПараметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПодразделенияИзменения.Ссылка
	|ПОМЕСТИТЬ ПодразделенияИзменения
	|ИЗ
	|	Справочник.Подразделения.Изменения КАК ПодразделенияИзменения
	|ГДЕ
	|	ПодразделенияИзменения.Узел = &Узел
	|	И &РежимЗапуска = ""Регламент""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	спрСправочник.Ссылка,
	|	""3"" КАК ТипСправочника,
	|	спрСправочник.Код,
	|	ВЫБОР
	|		КОГДА спрСправочник.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА спрСправочник.Наименование
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(спрСправочник.Наименование, 4, 1) = "" ""
	|					ТОГДА ПОДСТРОКА(спрСправочник.Наименование, 1, 3) + "" "" + спрСправочник.НаименованиеИнвД
	|				КОГДА ПОДСТРОКА(спрСправочник.Наименование, 5, 1) = "" ""
	|					ТОГДА ПОДСТРОКА(спрСправочник.Наименование, 1, 4) + "" "" + спрСправочник.НаименованиеИнвД
	|				ИНАЧЕ спрСправочник.НаименованиеИнвД
	|			КОНЕЦ
	|	КОНЕЦ КАК Наименование,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА спрСправочник.Ссылка В ИЕРАРХИИ (&Объекты)
	|				ТОГДА спрСправочник.Регион.Код
	|			ИНАЧЕ спрСправочник.Родитель.Код
	|		КОНЕЦ КАК СТРОКА(36)) КАК КодРодителя,
	|	ВЫБОР
	|		КОГДА спрСправочник.ПометкаУдаления
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ПометкаУдаления,
	|	ЕСТЬNULL(спрСправочник.КодИнвД, спрСправочник.Код) КАК УбытокЭкономия,
	|	спрСправочник.ДатаОткрытия,
	|	СвязиПодразделенийСрезПоследних.Подразделение КАК ОсновноеПодразделение,
	|	ВЫБОР
	|		КОГДА спрСправочник.Родитель В ИЕРАРХИИ (&Объекты)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПодчиненГоловномуПодразделению
	|{ВЫБРАТЬ
	|	Ссылка.*,
	|	ТипСправочника,
	|	Код,
	|	Наименование,
	|	КодРодителя,
	|	ПометкаУдаления,
	|	УбытокЭкономия,
	|	ДатаОткрытия,
	|	ОсновноеПодразделение.*}
	|ИЗ
	|	Справочник.Подразделения КАК спрСправочник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиПодразделений.СрезПоследних(, ) КАК СвязиПодразделенийСрезПоследних
	|		ПО спрСправочник.Ссылка = СвязиПодразделенийСрезПоследних.ОсновноеПодразделение
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РежимЗапуска <> ""Регламент""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ спрСправочник.Ссылка В
	|					(ВЫБРАТЬ
	|						ПодразделенияИзменения.Ссылка
	|					ИЗ
	|						ПодразделенияИзменения КАК ПодразделенияИзменения)
	|		КОНЕЦ
	|{ГДЕ
	|	спрСправочник.Ссылка.* КАК Ссылка}";
	
	ПостроительОтчета_ТЧ2.Текст = ТекстЗапроса;
	
	//Установка уникальных параметров
	Если ДополнительныеПараметры.НастройкаСПараметрами.СохраненнаяНастройка.Свойство("ПодразделениеОбъектовВыборкиПодразделения") Тогда
		ПостроительОтчета_ТЧ2.Параметры.Вставить("Объекты", ДополнительныеПараметры.НастройкаСПараметрами.СохраненнаяНастройка.ПодразделениеОбъектовВыборкиПодразделения);
	КонецЕсли;
	
	ПостроительОтчета_ТЧ2.ЗаполнитьНастройки();
	ПостроительОтчета_ТЧ2.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета_ТЧ2.ТекстЗаголовка = "Отчет";
	
	Для Каждого СтрокаДоступныеПоля Из ПостроительОтчета_ТЧ2.ДоступныеПоля Цикл
		Если СтрокаДоступныеПоля.Имя 			= "ОписаниеОшибки" Тогда
			СтрокаДоступныеПоля.Представление 	= "Описание ошибки"
			
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПоляОтбора = ПостроительОтчета_ТЧ2.Отбор.ПолучитьДоступныеПоля();
	
	Отбор = ПостроительОтчета_ТЧ2.Отбор;
	
	Индекс = 0;
	Пока Индекс < ДоступныеПоляОтбора.Количество() Цикл
		СтрокаДоступныеПоляОтбора = ДоступныеПоляОтбора[Индекс];
		
		Если СтрокаДоступныеПоляОтбора.Имя = "Ссылка" Тогда
			Если Отбор.Найти("Ссылка") = Неопределено Тогда
				Отбор.Добавить(СтрокаДоступныеПоляОтбора.Имя, , "Подразделение");
			КонецЕсли;
			Индекс = Индекс + 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Справочник - Регионы
Процедура УстановитьНачальныеНастройки_ТЧ3(ДополнительныеПараметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегионыИзменения.Ссылка
	|ПОМЕСТИТЬ РегионыИзменения
	|ИЗ
	|	Справочник.Регионы.Изменения КАК РегионыИзменения
	|ГДЕ
	|	РегионыИзменения.Узел = &Узел
	|	И &РежимЗапуска = ""Регламент""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	спрСправочник.Ссылка,
	|	""4"" КАК ТипСправочника,
	|	спрСправочник.Код,
	|	спрСправочник.Наименование,
	|	спрСправочник.Родитель.Код КАК КодРодителя,
	|	ВЫБОР
	|		КОГДА спрСправочник.ПометкаУдаления
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ПометкаУдаления
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.Регионы КАК спрСправочник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РежимЗапуска <> ""Регламент""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ спрСправочник.Ссылка В
	|					(ВЫБРАТЬ
	|						РегионыИзменения.Ссылка
	|					ИЗ
	|						РегионыИзменения КАК РегионыИзменения)
	|		КОНЕЦ
	|{ГДЕ
	|	спрСправочник.Ссылка.* КАК Ссылка}";

	ПостроительОтчета_ТЧ3.Текст = ТекстЗапроса;	
	ПостроительОтчета_ТЧ3.ЗаполнитьНастройки();
	ПостроительОтчета_ТЧ3.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета_ТЧ3.ТекстЗаголовка = "Отчет";
	
	Для Каждого СтрокаДоступныеПоля Из ПостроительОтчета_ТЧ3.ДоступныеПоля Цикл
		Если СтрокаДоступныеПоля.Имя 			= "ОписаниеОшибки" Тогда
			СтрокаДоступныеПоля.Представление 	= "Описание ошибки"
			
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПоляОтбора = ПостроительОтчета_ТЧ3.Отбор.ПолучитьДоступныеПоля();
	
	Отбор = ПостроительОтчета_ТЧ3.Отбор;
	
	Индекс = 0;
	Пока Индекс < ДоступныеПоляОтбора.Количество() Цикл
		СтрокаДоступныеПоляОтбора = ДоступныеПоляОтбора[Индекс];
		
		Если СтрокаДоступныеПоляОтбора.Имя = "Ссылка" Тогда
			Если Отбор.Найти("Ссылка") = Неопределено Тогда
				Отбор.Добавить(СтрокаДоступныеПоляОтбора.Имя, , "Регион");
			КонецЕсли;
			Индекс = Индекс + 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Справочник - Номенклатура
Процедура УстановитьНачальныеНастройки_ТЧ4(ДополнительныеПараметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрСоответствий.Представление КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТСЗДляВыгрузкиНоменклатуры
	|ИЗ
	|	РегистрСведений.РегистрСоответствий КАК РегистрСоответствий
	|ГДЕ
	|	ПОДСТРОКА(РегистрСоответствий.Тип, 1, 32) = ""КОГНОС_СЗДляВыгрузкиНоменклатуры""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ.Ссылка,
	|	МАКСИМУМ(ВЗ.СтатьяЗатрат) КАК СтатьяЗатрат,
	|	ВЗ.СтатьяЗатрат.Код
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Ссылка,
	|		Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат,
	|		Номенклатура.Наименование КАК Наименование
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСЗДляВыгрузкиНоменклатуры КАК ВТ
	|			ПО Номенклатура.СтатьяЗатрат = ВТ.СтатьяЗатрат
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		спрНоменклатура.Ссылка,
	|		МАКСИМУМ(ДопустимыеСЗдляНоменклатуры.СтатьяЗатрат),
	|		NULL
	|	ИЗ
	|		Справочник.Номенклатура КАК спрНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСЗдляНоменклатуры КАК ДопустимыеСЗдляНоменклатуры
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСЗДляВыгрузкиНоменклатуры КАК ВТ
	|				ПО ДопустимыеСЗдляНоменклатуры.СтатьяЗатрат = ВТ.СтатьяЗатрат
	|			ПО спрНоменклатура.Ссылка = ДопустимыеСЗдляНоменклатуры.Номенклатура
	|	
	|	СГРУППИРОВАТЬ ПО
	|		спрНоменклатура.Ссылка) КАК ВЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ.Ссылка,
	|	ВЗ.СтатьяЗатрат.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РС.Представление КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_НоменклатураДляВыгрузкиНоменклатуры
	|ИЗ
	|	РегистрСведений.РегистрСоответствий КАК РС
	|ГДЕ
	|	ПОДСТРОКА(РС.Тип, 1, 42) = ""КОГНОС_НоменклатураДляВыгрузкиНоменклатуры""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураИзменения.Ссылка
	|ПОМЕСТИТЬ НоменклатураИзменения
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|ГДЕ
	|	НоменклатураИзменения.Узел = &Узел
	|	И &РежимЗапуска = ""Регламент""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЗ.Ссылка КАК Ссылка,
	|	""6"" КАК ТипСправочника,
	|	ВЗ.Ссылка.Код КАК Код,
	|	ВЗ.Ссылка.Наименование КАК Наименование,
	|	ВЗ.Ссылка.СтатьяЗатрат.Код КАК КодСтатьиЗатрат,
	|	ВЫБОР
	|		КОГДА ВЗ.Ссылка.ПометкаУдаления
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ПометкаУдаления,
	|	ВЗ.Ссылка.СтатьяЗатрат.Наименование КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА НЕ ВТ.Номенклатура ЕСТЬ NULL
	|			ТОГДА ""1""
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ДатаОткрытия
	|ПОМЕСТИТЬ НоменклатураДляВыгрузки
	|ИЗ
	|	ВТ_Номенклатура КАК ВЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураДляВыгрузкиНоменклатуры КАК ВТ
	|		ПО ВЗ.Ссылка = ВТ.Номенклатура
	|{ГДЕ
	|	ВЗ.Ссылка.*}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураДляВыгрузки.Ссылка,
	|	НоменклатураДляВыгрузки.ТипСправочника,
	|	НоменклатураДляВыгрузки.Код,
	|	НоменклатураДляВыгрузки.Наименование,
	|	НоменклатураДляВыгрузки.КодСтатьиЗатрат,
	|	НоменклатураДляВыгрузки.ПометкаУдаления,
	|	НоменклатураДляВыгрузки.СтатьяЗатрат,
	|	НоменклатураДляВыгрузки.ДатаОткрытия
	|ПОМЕСТИТЬ НоменклатураЭлементы
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	НоменклатураДляВыгрузки КАК НоменклатураДляВыгрузки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РежимЗапуска <> ""Регламент""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НоменклатураДляВыгрузки.Ссылка В
	|					(ВЫБРАТЬ
	|						НоменклатураИзменения.Ссылка
	|					ИЗ
	|						НоменклатураИзменения КАК НоменклатураИзменения)
	|		КОНЕЦ
	|{ГДЕ
	|	НоменклатураДляВыгрузки.Ссылка.*}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НоменклатураЭлементы.Ссылка.Родитель КАК Ссылка,
	|	""6"" КАК ТипСправочника,
	|	НоменклатураЭлементы.Ссылка.Родитель.Код КАК Код,
	|	НоменклатураЭлементы.Ссылка.Родитель.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА НоменклатураЭлементы.Ссылка.Родитель.ПометкаУдаления
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ПометкаУдаления
	|ПОМЕСТИТЬ НоменклатураГруппы
	|ИЗ
	|	НоменклатураЭлементы КАК НоменклатураЭлементы
	|ГДЕ
	|	НоменклатураЭлементы.Ссылка.Родитель <> НЕОПРЕДЕЛЕНО
	|	И НоменклатураЭлементы.Ссылка.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураЭлементы.Ссылка,
	|	НоменклатураЭлементы.ТипСправочника,
	|	НоменклатураЭлементы.Код,
	|	НоменклатураЭлементы.Наименование,
	|	НоменклатураЭлементы.КодСтатьиЗатрат,
	|	НоменклатураЭлементы.ПометкаУдаления,
	|	ПРЕДСТАВЛЕНИЕ(НоменклатураЭлементы.СтатьяЗатрат) КАК СтатьяЗатрат,
	|	НоменклатураЭлементы.ДатаОткрытия
	|ИЗ
	|	НоменклатураЭлементы КАК НоменклатураЭлементы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураГруппы.Ссылка,
	|	НоменклатураГруппы.ТипСправочника,
	|	НоменклатураГруппы.Код,
	|	НоменклатураГруппы.Наименование,
	|	NULL,
	|	НоменклатураГруппы.ПометкаУдаления,
	|	NULL,
	|	NULL
	|ИЗ
	|	НоменклатураГруппы КАК НоменклатураГруппы";

	ПостроительОтчета_ТЧ4.Текст = ТекстЗапроса;
	
	ПостроительОтчета_ТЧ4.ЗаполнитьНастройки();
	ПостроительОтчета_ТЧ4.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета_ТЧ4.ТекстЗаголовка = "Отчет";
	
	Для Каждого СтрокаДоступныеПоля Из ПостроительОтчета_ТЧ4.ДоступныеПоля Цикл
		Если СтрокаДоступныеПоля.Имя 			= "ОписаниеОшибки" Тогда
			СтрокаДоступныеПоля.Представление 	= "Описание ошибки"
			
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПоляОтбора = ПостроительОтчета_ТЧ4.Отбор.ПолучитьДоступныеПоля();
	
	Отбор = ПостроительОтчета_ТЧ4.Отбор;
	
	Индекс = 0;
	Пока Индекс < ДоступныеПоляОтбора.Количество() Цикл
		СтрокаДоступныеПоляОтбора = ДоступныеПоляОтбора[Индекс];
		
		Если СтрокаДоступныеПоляОтбора.Имя = "Ссылка" Тогда
			Если Отбор.Найти("Ссылка") = Неопределено Тогда
				Отбор.Добавить(СтрокаДоступныеПоляОтбора.Имя, , "Номенклатура");
			КонецЕсли;
			Индекс = Индекс + 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

//Справочник - Контрагенты
Процедура УстановитьНачальныеНастройки_ТЧ5(ДополнительныеПараметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КонтрагентыИзменения.Ссылка
	|ПОМЕСТИТЬ КонтрагентыИзменения
	|ИЗ
	|	Справочник.Контрагенты.Изменения КАК КонтрагентыИзменения
	|ГДЕ
	|	КонтрагентыИзменения.Узел = &Узел
	|	И &РежимЗапуска = ""Регламент""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	спрСправочник.Ссылка,
	|	""11"" КАК ТипСправочника,
	|	спрСправочник.Ссылка.Код КАК Код,
	|	спрСправочник.Ссылка.Наименование КАК Наименование,
	|	спрСправочник.Ссылка.ИНН КАК ИНН,
	|	ВЫБОР
	|		КОГДА спрСправочник.Ссылка = спрСправочник.ГоловнойКонтрагент
	|				ИЛИ спрСправочник.ОбособленноеПодразделение
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ГоловнойКонтрагент
	|{ВЫБРАТЬ
	|	Ссылка.*,
	|	ТипСправочника,
	|	Код,
	|	Наименование,
	|	ИНН,
	|	ГоловнойКонтрагент}
	|ИЗ
	|	Справочник.Контрагенты КАК спрСправочник
	|ГДЕ
	|	спрСправочник.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				РС.Представление
	|			ИЗ
	|				РегистрСведений.РегистрСоответствий.СрезПоследних(&ТекущаяДата, Тип = ""ГруппыАфилированныхКонтрагентов"") КАК РС)
	|	И НЕ спрСправочник.ЭтоГруппа
	|	И НЕ спрСправочник.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &РежимЗапуска <> ""Регламент""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ спрСправочник.Ссылка В
	|					(ВЫБРАТЬ
	|						КонтрагентыИзменения.Ссылка
	|					ИЗ
	|						КонтрагентыИзменения КАК КонтрагентыИзменения)
	|		КОНЕЦ
	|{ГДЕ
	|	спрСправочник.Ссылка.* КАК Ссылка,
	|	спрСправочник.ПометкаУдаления}";

	ПостроительОтчета_ТЧ5.Текст = ТекстЗапроса;
	
	//Установка уникальных параметров
	ПостроительОтчета_ТЧ5.Параметры.Вставить("ТекущаяДата", ТекущаяДата());
	
	ПостроительОтчета_ТЧ5.ЗаполнитьНастройки();
	ПостроительОтчета_ТЧ5.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета_ТЧ5.ТекстЗаголовка = "Отчет";
	
	Для Каждого СтрокаДоступныеПоля Из ПостроительОтчета_ТЧ5.ДоступныеПоля Цикл
		Если СтрокаДоступныеПоля.Имя 			= "ОписаниеОшибки" Тогда
			СтрокаДоступныеПоля.Представление 	= "Описание ошибки"
			
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПоляОтбора = ПостроительОтчета_ТЧ5.Отбор.ПолучитьДоступныеПоля();
	
	Отбор = ПостроительОтчета_ТЧ5.Отбор;
	
	Индекс = 0;
	Пока Индекс < ДоступныеПоляОтбора.Количество() Цикл
		СтрокаДоступныеПоляОтбора = ДоступныеПоляОтбора[Индекс];
		
		Если СтрокаДоступныеПоляОтбора.Имя = "Ссылка" Тогда
			Если Отбор.Найти("Ссылка") = Неопределено Тогда
				Отбор.Добавить(СтрокаДоступныеПоляОтбора.Имя, , "Контрагент");
			КонецЕсли;
			Индекс = Индекс + 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Справочник - Проекты
Процедура УстановитьНачальныеНастройки_ТЧ6(ДополнительныеПараметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПроектыИзменения.Ссылка
	|ПОМЕСТИТЬ ПроектыИзменения
	|ИЗ
	|	Справочник.Проекты.Изменения КАК ПроектыИзменения
	|ГДЕ
	|	ПроектыИзменения.Узел = &Узел
	|	И &РежимЗапуска = ""Регламент""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	спрСправочник.Ссылка,
	|	""16"" КАК ТипСправочника,
	|	спрСправочник.Код,
	|	спрСправочник.Наименование,
	|	спрСправочник.Родитель.Код КАК КодРодителя,
	|	ВЫБОР
	|		КОГДА спрСправочник.ПометкаУдаления
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ПометкаУдаления
	|{ВЫБРАТЬ
	|	Ссылка.*,
	|	ТипСправочника,
	|	Код,
	|	Наименование,
	|	КодРодителя,
	|	ПометкаУдаления}
	|ИЗ
	|	Справочник.Проекты КАК спрСправочник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РежимЗапуска <> ""Регламент""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ спрСправочник.Ссылка В
	|					(ВЫБРАТЬ
	|						ПроектыИзменения.Ссылка
	|					ИЗ
	|						ПроектыИзменения КАК ПроектыИзменения)
	|		КОНЕЦ
	|{ГДЕ
	|	спрСправочник.Ссылка.* КАК Ссылка,
	|	спрСправочник.ПометкаУдаления}";

	ПостроительОтчета_ТЧ6.Текст = ТекстЗапроса;
	
	ПостроительОтчета_ТЧ6.ЗаполнитьНастройки();
	ПостроительОтчета_ТЧ6.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета_ТЧ6.ТекстЗаголовка = "Отчет";
	
	Для Каждого СтрокаДоступныеПоля Из ПостроительОтчета_ТЧ6.ДоступныеПоля Цикл
		Если СтрокаДоступныеПоля.Имя 			= "ОписаниеОшибки" Тогда
			СтрокаДоступныеПоля.Представление 	= "Описание ошибки"
			
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПоляОтбора = ПостроительОтчета_ТЧ6.Отбор.ПолучитьДоступныеПоля();
	
	Отбор = ПостроительОтчета_ТЧ6.Отбор;
	
	Индекс = 0;
	Пока Индекс < ДоступныеПоляОтбора.Количество() Цикл
		СтрокаДоступныеПоляОтбора = ДоступныеПоляОтбора[Индекс];
		
		Если СтрокаДоступныеПоляОтбора.Имя = "Ссылка" Тогда
			Если Отбор.Найти("Ссылка") = Неопределено Тогда
				Отбор.Добавить(СтрокаДоступныеПоляОтбора.Имя, , "Проект");
			КонецЕсли;
			Индекс = Индекс + 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Справочник - ХарактеристикиПомещений
Процедура УстановитьНачальныеНастройки_ТЧ7(ДополнительныеПараметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХарактеристикиПомещенийИзменения.Ссылка
	|ПОМЕСТИТЬ ХарактеристикиПомещенийИзменения
	|ИЗ
	|	Справочник.ХарактеристикиПомещений.Изменения КАК ХарактеристикиПомещенийИзменения
	|ГДЕ
	|	ХарактеристикиПомещенийИзменения.Узел = &Узел
	|	И &РежимЗапуска = ""Регламент""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХарактеристикиПомещений.Ссылка,
	|	""18"" КАК ТипСправочника,
	|	ХарактеристикиПомещений.Код,
	|	ХарактеристикиПомещений.Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ХарактеристикиПомещений.ВидПлощади) КАК КодРодителя,
	|	ВЫБОР
	|		КОГДА ХарактеристикиПомещений.ПометкаУдаления
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ПометкаУдаления
	|{ВЫБРАТЬ
	|	Ссылка.*,
	|	ТипСправочника,
	|	Код,
	|	Наименование,
	|	КодРодителя,
	|	ПометкаУдаления}
	|ИЗ
	|	Справочник.ХарактеристикиПомещений КАК ХарактеристикиПомещений
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РежимЗапуска <> ""Регламент""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ХарактеристикиПомещений.Ссылка В
	|					(ВЫБРАТЬ
	|						ХарактеристикиПомещенийИзменения.Ссылка
	|					ИЗ
	|						ХарактеристикиПомещенийИзменения КАК ХарактеристикиПомещенийИзменения)
	|		КОНЕЦ
	|{ГДЕ
	|	ХарактеристикиПомещений.Ссылка.* КАК Ссылка,
	|	ХарактеристикиПомещений.ПометкаУдаления}";

	ПостроительОтчета_ТЧ7.Текст = ТекстЗапроса;
	
	ПостроительОтчета_ТЧ7.ЗаполнитьНастройки();
	ПостроительОтчета_ТЧ7.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета_ТЧ7.ТекстЗаголовка = "Отчет";
	
	Для Каждого СтрокаДоступныеПоля Из ПостроительОтчета_ТЧ7.ДоступныеПоля Цикл
		Если СтрокаДоступныеПоля.Имя 			= "ОписаниеОшибки" Тогда
			СтрокаДоступныеПоля.Представление 	= "Описание ошибки"
			
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПоляОтбора = ПостроительОтчета_ТЧ7.Отбор.ПолучитьДоступныеПоля();
	
	Отбор = ПостроительОтчета_ТЧ7.Отбор;
	
	Индекс = 0;
	Пока Индекс < ДоступныеПоляОтбора.Количество() Цикл
		СтрокаДоступныеПоляОтбора = ДоступныеПоляОтбора[Индекс];
		
		Если СтрокаДоступныеПоляОтбора.Имя = "Ссылка" Тогда
			Если Отбор.Найти("Ссылка") = Неопределено Тогда
				Отбор.Добавить(СтрокаДоступныеПоляОтбора.Имя, , "Характеристика");
			КонецЕсли;
			Индекс = Индекс + 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Справочник - ВидыТоваровАрендаторов
Процедура УстановитьНачальныеНастройки_ТЧ8(ДополнительныеПараметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыТоваровАрендаторовИзменения.Ссылка
	|ПОМЕСТИТЬ ВидыТоваровАрендаторовИзменения
	|ИЗ
	|	Справочник.ВидыТоваровАрендаторов.Изменения КАК ВидыТоваровАрендаторовИзменения
	|ГДЕ
	|	ВидыТоваровАрендаторовИзменения.Узел = &Узел
	|	И &РежимЗапуска = ""Регламент""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыТоваровАрендаторов.Ссылка,
	|	""19"" КАК ТипСправочника,
	|	ВидыТоваровАрендаторов.Код,
	|	ВидыТоваровАрендаторов.Наименование,
	|	ВидыТоваровАрендаторов.Родитель.Код КАК КодРодителя,
	|	ВЫБОР
	|		КОГДА ВидыТоваровАрендаторов.ПометкаУдаления
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ПометкаУдаления
	|{ВЫБРАТЬ
	|	Ссылка.*,
	|	ТипСправочника,
	|	Код,
	|	Наименование,
	|	КодРодителя,
	|	ПометкаУдаления}
	|ИЗ
	|	Справочник.ВидыТоваровАрендаторов КАК ВидыТоваровАрендаторов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РежимЗапуска <> ""Регламент""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВидыТоваровАрендаторов.Ссылка В
	|					(ВЫБРАТЬ
	|						ВидыТоваровАрендаторовИзменения.Ссылка
	|					ИЗ
	|						ВидыТоваровАрендаторовИзменения КАК ВидыТоваровАрендаторовИзменения)
	|		КОНЕЦ
	|{ГДЕ
	|	ВидыТоваровАрендаторов.Ссылка.* КАК Ссылка}";

	ПостроительОтчета_ТЧ8.Текст = ТекстЗапроса;
	
	ПостроительОтчета_ТЧ8.ЗаполнитьНастройки();
	ПостроительОтчета_ТЧ8.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета_ТЧ8.ТекстЗаголовка = "Отчет";
	
	Для Каждого СтрокаДоступныеПоля Из ПостроительОтчета_ТЧ8.ДоступныеПоля Цикл
		Если СтрокаДоступныеПоля.Имя 			= "ОписаниеОшибки" Тогда
			СтрокаДоступныеПоля.Представление 	= "Описание ошибки"
			
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПоляОтбора = ПостроительОтчета_ТЧ8.Отбор.ПолучитьДоступныеПоля();
	
	Отбор = ПостроительОтчета_ТЧ8.Отбор;
	
	Индекс = 0;
	Пока Индекс < ДоступныеПоляОтбора.Количество() Цикл
		СтрокаДоступныеПоляОтбора = ДоступныеПоляОтбора[Индекс];
		
		Если СтрокаДоступныеПоляОтбора.Имя = "Ссылка" Тогда
			Если Отбор.Найти("Ссылка") = Неопределено Тогда
				Отбор.Добавить(СтрокаДоступныеПоляОтбора.Имя, , "Вид товара арендатора");
			КонецЕсли;
			Индекс = Индекс + 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // ВидыТоваровАрендаторов

// Справочник - ВидыДеятельности
Процедура УстановитьНачальныеНастройки_ТЧ9(ДополнительныеПараметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыДеятельностиИзменения.Ссылка
	|ПОМЕСТИТЬ ВидыДеятельностиИзменения
	|ИЗ
	|	Справочник.ВидыДеятельности.Изменения КАК ВидыДеятельностиИзменения
	|ГДЕ
	|	ВидыДеятельностиИзменения.Узел = &Узел
	|	И &РежимЗапуска = ""Регламент""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыДеятельности.Ссылка,
	|	""20"" КАК ТипСправочника,
	|	ВидыДеятельности.Код,
	|	ВидыДеятельности.Наименование,
	|	ВидыДеятельности.Родитель.Код КАК КодРодителя,
	|	ВЫБОР
	|		КОГДА ВидыДеятельности.ПометкаУдаления
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ПометкаУдаления
	|{ВЫБРАТЬ
	|	Ссылка.*,
	|	ТипСправочника,
	|	Код,
	|	Наименование,
	|	КодРодителя,
	|	ПометкаУдаления}
	|ИЗ
	|	Справочник.ВидыДеятельности КАК ВидыДеятельности
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РежимЗапуска <> ""Регламент""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВидыДеятельности.Ссылка В
	|					(ВЫБРАТЬ
	|						ВидыДеятельностиИзменения.Ссылка
	|					ИЗ
	|						ВидыДеятельностиИзменения КАК ВидыДеятельностиИзменения)
	|		КОНЕЦ
	|{ГДЕ
	|	ВидыДеятельности.Ссылка.* КАК Ссылка,
	|	ВидыДеятельности.ПометкаУдаления}";

	ПостроительОтчета_ТЧ9.Текст = ТекстЗапроса;
	
	ПостроительОтчета_ТЧ9.ЗаполнитьНастройки();
	ПостроительОтчета_ТЧ9.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета_ТЧ9.ТекстЗаголовка = "Отчет";
	
	Для Каждого СтрокаДоступныеПоля Из ПостроительОтчета_ТЧ9.ДоступныеПоля Цикл
		
		Если СтрокаДоступныеПоля.Имя 			= "ОписаниеОшибки" Тогда
			СтрокаДоступныеПоля.Представление 	= "Описание ошибки"
		
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПоляОтбора = ПостроительОтчета_ТЧ9.Отбор.ПолучитьДоступныеПоля();
	
	Отбор = ПостроительОтчета_ТЧ9.Отбор;
	
	Индекс = 0;
	Пока Индекс < ДоступныеПоляОтбора.Количество() Цикл
		СтрокаДоступныеПоляОтбора = ДоступныеПоляОтбора[Индекс];
		
		Если СтрокаДоступныеПоляОтбора.Имя = "Ссылка" Тогда
			Если Отбор.Найти("Ссылка") = Неопределено Тогда
				Отбор.Добавить(СтрокаДоступныеПоляОтбора.Имя, , "Вид деятельности");
			КонецЕсли;
			Индекс = Индекс + 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Справочник - Организации
Процедура УстановитьНачальныеНастройки_ТЧ10(ДополнительныеПараметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОрганизацииИзменения.Ссылка
	|ПОМЕСТИТЬ ОрганизацииИзменения
	|ИЗ
	|	Справочник.Организации.Изменения КАК ОрганизацииИзменения
	|ГДЕ
	|	ОрганизацииИзменения.Узел = &Узел
	|	И &РежимЗапуска = ""Регламент""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	""21"" КАК ТипСправочника,
	|	Организации.Код,
	|	Организации.Наименование,
	|	ВЫБОР
	|		КОГДА Организации.ПометкаУдаления
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ПометкаУдаления,
	|	Организации.ВидДеятельности КАК ВидДеятельности,
	|	ПРЕДСТАВЛЕНИЕ(Организации.ЮрФизЛицо) КАК ЮрФизЛицо,
	|	ПРЕДСТАВЛЕНИЕ(УчетнаяПолитикаОрганизацийСрезПоследних.СистемаНалогообложения) КАК СистемаНалогообложения,
	|	Организации.ИНН,
	|	Организации.КодОКОПФ,
	|	ПРЕДСТАВЛЕНИЕ(Организации.ТекущийСтатус) КАК ТекущийСтатус
	|{ВЫБРАТЬ
	|	Ссылка.*,
	|	ТипСправочника,
	|	Код,
	|	Наименование,
	|	ПометкаУдаления,
	|	ВидДеятельности,
	|	ЮрФизЛицо,
	|	СистемаНалогообложения,
	|	ИНН,
	|	КодОКОПФ,
	|	ТекущийСтатус}
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ТекущаяДата, ) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|		ПО Организации.Ссылка = УчетнаяПолитикаОрганизацийСрезПоследних.Организация
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РежимЗапуска <> ""Регламент""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Организации.Ссылка В
	|					(ВЫБРАТЬ
	|						ОрганизацииИзменения.Ссылка
	|					ИЗ
	|						ОрганизацииИзменения КАК ОрганизацииИзменения)
	|		КОНЕЦ
	|{ГДЕ
	|	Организации.Ссылка.*,
	|	Организации.Наименование}";


	ПостроительОтчета_ТЧ10.Текст = ТекстЗапроса;
	
	//Установка уникальных параметров
	ПостроительОтчета_ТЧ10.Параметры.Вставить("ТекущаяДата", ТекущаяДата());

	ПостроительОтчета_ТЧ10.ЗаполнитьНастройки();
	ПостроительОтчета_ТЧ10.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета_ТЧ10.ТекстЗаголовка = "Отчет";
	
	Для Каждого СтрокаДоступныеПоля Из ПостроительОтчета_ТЧ10.ДоступныеПоля Цикл
		Если СтрокаДоступныеПоля.Имя 			= "ОписаниеОшибки" Тогда
			СтрокаДоступныеПоля.Представление 	= "Описание ошибки"
			
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПоляОтбора = ПостроительОтчета_ТЧ10.Отбор.ПолучитьДоступныеПоля();
	
	Отбор = ПостроительОтчета_ТЧ10.Отбор;
	
	Индекс = 0;
	Пока Индекс < ДоступныеПоляОтбора.Количество() Цикл
		СтрокаДоступныеПоляОтбора = ДоступныеПоляОтбора[Индекс];
		
		Если СтрокаДоступныеПоляОтбора.Имя = "Ссылка" Тогда
			Если Отбор.Найти("Ссылка") = Неопределено Тогда
				Отбор.Добавить(СтрокаДоступныеПоляОтбора.Имя, , "Организация");
			КонецЕсли;
			Индекс = Индекс + 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Справочник - Расходы будущих периодов
Процедура УстановитьНачальныеНастройки_ТЧ11(ДополнительныеПараметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасходыБудущихПериодовИзменения.Ссылка
	|ПОМЕСТИТЬ РасходыБудущихПериодовИзменения
	|ИЗ
	|	Справочник.РасходыБудущихПериодов.Изменения КАК РасходыБудущихПериодовИзменения
	|ГДЕ
	|	РасходыБудущихПериодовИзменения.Узел = &Узел
	|	И &РежимЗапуска = ""Регламент""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходыБудущихПериодов.Ссылка,
	|	""22"" КАК ТипСправочника,
	|	РасходыБудущихПериодов.Код,
	|	РасходыБудущихПериодов.Наименование,
	|	РасходыБудущихПериодов.Родитель.Код КАК КодРодителя,
	|	ВЫБОР
	|		КОГДА РасходыБудущихПериодов.ПометкаУдаления
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ПометкаУдаления,
	|	ПРЕДСТАВЛЕНИЕ(РасходыБудущихПериодов.СпособПризнанияРасходов) КАК СпособПризнанияРасходов,
	|	РасходыБудущихПериодов.ДатаНачалаСписания,
	|	РасходыБудущихПериодов.ДатаОкончанияСписания,
	|	РасходыБудущихПериодов.Сумма,
	|	РасходыБудущихПериодов.Подразделение,
	|	РасходыБудущихПериодов.Подразделение.КодИнвД,
	|	РасходыБудущихПериодов.ПодразделениеОрганизации,
	|	РасходыБудущихПериодов.ПодразделениеОрганизации.Код,
	|	РасходыБудущихПериодов.СтатьяЗатрат,
	|	РасходыБудущихПериодов.СтатьяЗатрат.Код,
	|	ВЫБОР
	|		КОГДА РасходыБудущихПериодов.Выбытие
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК Выбытие,
	|	РасходыБудущихПериодов.ДатаВыбытия
	|{ВЫБРАТЬ
	|	Ссылка.*,
	|	ТипСправочника,
	|	Код,
	|	Наименование,
	|	КодРодителя,
	|	ПометкаУдаления}
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РежимЗапуска <> ""Регламент""
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ РасходыБудущихПериодов.Ссылка В
	|					(ВЫБРАТЬ
	|						РасходыБудущихПериодовИзменения.Ссылка
	|					ИЗ
	|						РасходыБудущихПериодовИзменения КАК РасходыБудущихПериодовИзменения)
	|		КОНЕЦ
	|{ГДЕ
	|	РасходыБудущихПериодов.Ссылка.* КАК Ссылка,
	|	РасходыБудущихПериодов.ПометкаУдаления}";

	ПостроительОтчета_ТЧ11.Текст = ТекстЗапроса;
	
	ПостроительОтчета_ТЧ11.ЗаполнитьНастройки();
	ПостроительОтчета_ТЧ11.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета_ТЧ11.ТекстЗаголовка = "Отчет";
	
	Для Каждого СтрокаДоступныеПоля Из ПостроительОтчета_ТЧ11.ДоступныеПоля Цикл
		Если СтрокаДоступныеПоля.Имя 			= "ОписаниеОшибки" Тогда
			СтрокаДоступныеПоля.Представление 	= "Описание ошибки"
			
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПоляОтбора = ПостроительОтчета_ТЧ11.Отбор.ПолучитьДоступныеПоля();
	
	Отбор = ПостроительОтчета_ТЧ11.Отбор;
	
	Индекс = 0;
	Пока Индекс < ДоступныеПоляОтбора.Количество() Цикл
		СтрокаДоступныеПоляОтбора = ДоступныеПоляОтбора[Индекс];
		
		Если СтрокаДоступныеПоляОтбора.Имя = "Ссылка" Тогда
			Если Отбор.Найти("Ссылка") = Неопределено Тогда
				Отбор.Добавить(СтрокаДоступныеПоляОтбора.Имя, , "Вид расхода будущего периода");
			КонецЕсли;
			Индекс = Индекс + 1;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Процедура - Установить начальные настройки
//
// Параметры:
//  ДополнительныеПараметры	 - Структура	 - Дополнительные параметры
//
Процедура УстановитьНачальныеНастройки(РежимЗапуска, НастройкаСПараметрами) Экспорт
	
	ДополнительныеПараметры = ПолучитьСтруктуруСДополнительнымиПараметрами(РежимЗапуска,НастройкаСПараметрами);
	
	УстановитьНачальныеНастройки_ТЧ1(ДополнительныеПараметры);
	
	УстановитьНачальныеНастройки_ТЧ2(ДополнительныеПараметры);
	
	УстановитьНачальныеНастройки_ТЧ3(ДополнительныеПараметры);
	
	УстановитьНачальныеНастройки_ТЧ4(ДополнительныеПараметры);
	
	УстановитьНачальныеНастройки_ТЧ5(ДополнительныеПараметры);
	
	УстановитьНачальныеНастройки_ТЧ6(ДополнительныеПараметры);
	
	УстановитьНачальныеНастройки_ТЧ7(ДополнительныеПараметры);
	
	УстановитьНачальныеНастройки_ТЧ8(ДополнительныеПараметры);
	
	УстановитьНачальныеНастройки_ТЧ9(ДополнительныеПараметры);
	
	УстановитьНачальныеНастройки_ТЧ10(ДополнительныеПараметры);
	
	УстановитьНачальныеНастройки_ТЧ11(ДополнительныеПараметры);
		
КонецПроцедуры // УстановитьНачальныеНастройки()

// Процедура - Сформировать структуру для сохранения настроек
//
// Параметры:
//  СтруктураСНастройками	 - Структура	 - Структура с настройками
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		СтруктураСНастройками = Новый Структура;
	КонецЕсли;
	
	СтруктураСНастройками.Вставить("УзелОбмена"												,ЭтотОбъект.НАСТРОЙКАУзелОбмена);
	СтруктураСНастройками.Вставить("КатегорияОбъектовВыгрузкиВГостинницу"					,ЭтотОбъект.НАСТРОЙКАКатегорияОбъектовВыгрузкиВГостинницу);
	СтруктураСНастройками.Вставить("ПодразделениеОбъектовВыборкиПодразделения"				,ЭтотОбъект.НАСТРОЙКАИерархияОбъектовВыборкиПодразделения);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Процедура - Сохранить настройки
//
// Параметры:
//  Форма		 - Форма	 - Форма
//  ИмяОбъекта	 - Строка	 - Имя объекта
//
Процедура СохранитьНастройки(Форма, ИмяОбъекта = Неопределено) Экспорт
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь"				, мРегламентнаяНастройка.Пользователь);
	СтруктураНастройки.Вставить("ИмяОбъекта"				, ?(ИмяОбъекта = Неопределено, Строка(ЭтотОбъект), ИмяОбъекта));
	СтруктураНастройки.Вставить("НаименованиеНастройки"		, "НастройкаРегламентногоЗадания");
	СтруктураНастройки.Вставить("СохраненнаяНастройка"		, СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии"	, Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически"	, Ложь);
	
	Результат = УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки);
	
КонецПроцедуры // СохранитьНастройки()

// Процедура - Восстановить настройку узла обмена из структуры
// Параметры:
// СтруктураСНастройками - Структура с сохраняемыми настройками
Процедура ВосстановитьНастройкуУзлаОбменаИзСтруктуры(СтруктураСНастройками)
	
	Если СтруктураСНастройками.Свойство("УзелОбмена") Тогда	
		НАСТРОЙКАУзелОбмена = СтруктураСНастройками.УзелОбмена;
	КонецЕсли;	
	
КонецПроцедуры // ВосстановитьНастройкуУзлаОбменаИзСтруктуры()

// Процедура - восстановить настройку категории объектов выгрузки в гостинницу
// Параметры:
// СтруктураСНастройками - Структура с сохраняемыми настройками
Процедура ВосстановитьНастройкуКатегорииОбъектовВыгрузкиВГостинницу(СтруктураСНастройками)
	
	Если СтруктураСНастройками.Свойство("КатегорияОбъектовВыгрузкиВГостинницу") Тогда	
		НАСТРОЙКАКатегорияОбъектовВыгрузкиВГостинницу = СтруктураСНастройками.КатегорияОбъектовВыгрузкиВГостинницу;
	КонецЕсли;	
	
КонецПроцедуры // ВосстановитьНастройкуКатегорииОбъектовВыгрузкиВГостинницу()

// Процедура - Восстановить настройку иерархии объектов выборки подразделения
// Параметры:
// СтруктураСНастройками - Структура с сохраняемыми настройками
Процедура ВосстановитьНастройкуИерархииОбъектовВыборкиПодразделения(СтруктураСНастройками)
	
	Если СтруктураСНастройками.Свойство("ПодразделениеОбъектовВыборкиПодразделения") Тогда	
		НАСТРОЙКАИерархияОбъектовВыборкиПодразделения = СтруктураСНастройками.ПодразделениеОбъектовВыборкиПодразделения;
	КонецЕсли;	
	
КонецПроцедуры // ВосстановитьНастройкуИерархииОбъектовВыборкиПодразделения()

// Функция - Восстановить настройки из структуры
//
// Параметры:
//  СтруктураСНастройками	 - Структура	 - Структура с настройками
//  Отчет					 - Отчет	 - Отчет
// 
// Возвращаемое значение:
// Булево  - Признак получения настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Перем ДеревоПоказатели, ТаблицаИнтервалы;
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВосстановитьНастройкуУзлаОбменаИзСтруктуры(СтруктураСНастройками);
	ВосстановитьНастройкуКатегорииОбъектовВыгрузкиВГостинницу(СтруктураСНастройками);
	ВосстановитьНастройкуИерархииОбъектовВыборкиПодразделения(СтруктураСНастройками);
	
	Возврат СтруктураСНастройками;
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Функция - Восстановить настройки из структуры
//
// Параметры:
//  СтруктураСНастройками	 - Структура	 - Структура с настройками
//  Отчет					 - Отчет	 - Отчет
// 
// Возвращаемое значение:
// Булево  - Признак получения настроек
Функция ВосстановитьНастройкиРегламентногоЗадания() Экспорт
	
	ИмяОбъекта 												= Неопределено;
	СтруктураНастройки 										= Новый Структура;
	СтруктураНастройки.Вставить("Пользователь"				, Неопределено);
	СтруктураНастройки.Вставить("ИмяОбъекта"				, ?(ИмяОбъекта = Неопределено, Строка(ЭтотОбъект), ИмяОбъекта));
	СтруктураНастройки.Вставить("НаименованиеНастройки"		, "НастройкаРегламентногоЗадания");
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии"	, Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически"	, Ложь);
	
	Результат = УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки);
	
	Если Результат Тогда
		
		Возврат ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
		
	КонецЕсли;
	
КонецФункции 

// Функция - Восстановить настройки
//
// Параметры:
//  Форма		 - Форма	 - Форма
//  ИмяОбъекта	 - Строка	 - Имя объекта
// 
// Возвращаемое значение:
//   - 
//
Функция ВосстановитьНастройки(Форма, ИмяОбъекта = Неопределено, РежимЗапуска = Неопределено) Экспорт
	
	Перем СохраненнаяНастройка;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь"			, мТекущийПользователь);
	СтруктураНастройки.Вставить("ИмяОбъекта"			, ?(ИмяОбъекта = Неопределено, Строка(ЭтотОбъект), ИмяОбъекта));
	СтруктураНастройки.Вставить("НаименованиеНастройки"	, ?(мТекущаяНастройка = Неопределено, Неопределено
														  ,мТекущаяНастройка.НаименованиеНастройки));
														  
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
		мТекущаяНастройка = Результат;
		ВосстановитьНастройкиИзСтруктуры(Результат.СохраненнаяНастройка);
	Иначе
		мТекущаяНастройка = СтруктураНастройки;
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Форма);

КонецФункции // ВосстановитьНастройки()

#КонецОбласти

#Область ПроцедурыРаботысРегламентнымиНастройками

// Процедура - Сформировать структуру для сохранения настроек (регл)
//
// Параметры:
//  СтруктураСНастройками	 - Структура	 - Структура с настройками
//
Процедура СформироватьСтруктуруДляСохраненияНастроек_Регл(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		СтруктураСНастройками = Новый Структура;
	КонецЕсли;
	
	СтруктураСНастройками.Вставить("СписокРассылки", ЭтотОбъект["СписокРассылки"].Выгрузить());
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек_Регл()

// Процедура - Восстановить настройки (регл)
// 
Процедура ВосстановитьНастройки_Регл() Экспорт
		
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь"			, мРегламентнаяНастройка.Пользователь);
	СтруктураНастройки.Вставить("ИмяОбъекта"			, ?(мРегламентнаяНастройка.Свойство("ИмяОбъекта")
														, мРегламентнаяНастройка.ИмяОбъекта, Строка(ЭтотОбъект)));
														
	СтруктураНастройки.Вставить("НаименованиеНастройки"	, ?(мРегламентнаяНастройка.Свойство("НаименованиеНастройки") 
														, мРегламентнаяНастройка.НаименованиеНастройки, "Основная"));
	
	Результат = УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки);
	
	Если Результат Тогда
		ВосстановитьНастройкиИзСтруктуры_Регл(СтруктураНастройки.СохраненнаяНастройка);
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройки_Регл()

// Функция - Восстановить настройки из структуры (регл)
//
// Параметры:
//  СтруктураСНастройками	 - Структура	 - Структура с настройками
// 
// Возвращаемое значение:
// Булево  - Признак получения настроек
//
Функция ВосстановитьНастройкиИзСтруктуры_Регл(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	тзСписокРассылки = ЭтотОбъект["СписокРассылки"].ВыгрузитьКолонки();
	СтруктураСНастройками.Свойство("СписокРассылки", тзСписокРассылки);
	ЭтотОбъект["СписокРассылки"].Загрузить(тзСписокРассылки);
	
	Возврат Истина;
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры_Регл()

// Процедура - Сохранить настройки (регл)
//
Процедура СохранитьНастройки_Регл() Экспорт
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроек_Регл(СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь"				, мРегламентнаяНастройка.Пользователь);
	СтруктураНастройки.Вставить("ИмяОбъекта"				, мРегламентнаяНастройка.ИмяОбъекта);
	СтруктураНастройки.Вставить("НаименованиеНастройки"		, мРегламентнаяНастройка.НаименованиеНастройки);
	СтруктураНастройки.Вставить("СохраненнаяНастройка"		, СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии"	, Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически"	, Ложь);
	
	Результат = УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки);
	
КонецПроцедуры // СохранитьНастройки_Регл()

#КонецОбласти

#Область ФункцииРегламентногоЗапуска

// Функция - Получить параметры файла для ДО
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент	 - Табличный документ, который надо подготовить
// 
// Возвращаемое значение:
// Структура  - Подготовленная структура для отправки в ДО
//
Функция ПолучитьПараметрыФайлаДляДО(ТабличныйДокумент)
	
	Результат = Новый Структура;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("MXL");
	
	ТабличныйДокумент.Записать(ИмяВременногоФайла);
	
	ВременныйФайл = Новый Файл(ИмяВременногоФайла);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);

	Результат.Вставить("АдресВременногоХранилищаФайла"	,ПоместитьВоВременноеХранилище(ДвоичныеДанные));
	Результат.Вставить("Имя"							,ЭтотОбъект.Метаданные().Имя);
	Результат.Вставить("Расширение"						,"MXL");
	Результат.Вставить("Текст"							,"");
	Результат.Вставить("Размер"							,ВременныйФайл.Размер());
	Результат.Вставить("ВремяИзменения"					,ВременныйФайл.ПолучитьВремяИзменения());
	Результат.Вставить("ВремяИзмененияУниверсальное"	,ВременныйФайл.ПолучитьУниверсальноеВремяИзменения());
	
	Возврат Результат;
	
КонецФункции

// Процедура - Создать процесс в ДО
//
// Параметры:
//  ПараметрыФайла	 - Структура	 - Подготовленная структура файла для отправки в ДО
//  СписокРассылкиДО - Массив	 - Массив с пользователями-получателями сообщения в ДО
//
Процедура СоздатьПроцессвДО(ПараметрыФайла, СписокРассылкиДО)
	
	Исполнитель = Новый Массив;
	Для Каждого стрПолучатели Из СписокРассылкиДО Цикл
		Исполнитель.Добавить(стрПолучатели.Пользователь.ФизЛицо);
	КонецЦикла;
	
	ПараметрыСозданияЗадачивДО = Новый Структура;
	ПараметрыСозданияЗадачивДО.Вставить("ТипПроцесса"	,"DMBusinessProcessAcquaintance");
	ПараметрыСозданияЗадачивДО.Вставить("Автор"			,Новый Структура ("ИзНастройки, Значение", Истина, "СлужебныйПользователь"));
	ПараметрыСозданияЗадачивДО.Вставить("Исполнитель"	,Новый Структура ("ИзНастройки, Значение", Ложь, Исполнитель));
	ПараметрыСозданияЗадачивДО.Вставить("Наименование"	,ЭтотОбъект.Метаданные().Представление());
	ПараметрыСозданияЗадачивДО.Вставить("Описание"		,"");
	ПараметрыСозданияЗадачивДО.Вставить("ДатаНачала"	,ТекущаяДата());
	ПараметрыСозданияЗадачивДО.Вставить("Срок"			,Неопределено);
	
	ИнтеграцияС1СДокументооборот.СоздатьБизнесПроцессВДО (,ПараметрыСозданияЗадачивДО, ПараметрыФайла, Истина);
	
КонецПроцедуры

// Процедура - Оповестить об ошибках
//
// Параметры:
//  Постфикс	 - Строка	 - Постфикс
Процедура ОповеститьЧерезДО(Постфикс) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПараметрыФайла = ПолучитьПараметрыФайлаДляДО(ТабличныйДокумент);
	
	СоздатьПроцессвДО(ПараметрыФайла, СписокРассылки);
	
КонецПроцедуры

// Процедура - Регламентный запуск
//
// Параметры:
// ПараметрыЗадангия 					  - Структура - структура с параметрами (guid события, вид события контроллера а.д. и тд.)
// ПреобразованнаяТаблицаДляЗаписиВКогнос - Таблица значений - пустая таблица значений, в последующем в нее передается
// результирующая таблица для загрузки в Cognos
Процедура РегламентныйЗапуск(ПараметрыЗадания, ПреобразованнаяТаблицаДляЗаписиВКогнос) Экспорт    
	
	Если ПараметрыЗадания.РежимЗапуска = "Интерактивный" Тогда
		
		Отказ = Ложь;
		
		ДанныеФайла = ИнтеграциясКОГНОС.СформироватьФайлВыгрузкиДанныхвКОГНОС_ВыгрузкаСправочника(ПреобразованнаяТаблицаДляЗаписиВКогнос
		,ПараметрыЗадания, Отказ);
		
		ПараметрыЗадания = ИнтеграциясКОГНОС.ПолучитьКопиюСтруктуры(ПараметрыЗадания);
		
		Данные 								= Новый Структура;
		Данные.Вставить("ДанныеФайла"		,ДанныеФайла);
		ПараметрыЗадания.Вставить("Данные"	,Новый ХранилищеЗначения(Данные));
		
		РегистрыСведений.КонтроллерАсинхронныхЗаданий.ДобавитьСобытие(ПараметрыЗадания);
		
		ИнтеграциясКОГНОС.ОповеститьКОГНОС(ПараметрыЗадания);
		
		Если Отказ Тогда
			
			ПараметрыЗадания 			= ИнтеграциясКОГНОС.ПолучитьКопиюСтруктуры(ПараметрыЗадания);
			ПараметрыЗадания.Событие 	= Справочники.СобытияКонтроллераАсинхронныхЗаданий.ИнтеграциясКОГНОС_ОшибкаIT;	
			РегистрыСведений.КонтроллерАсинхронныхЗаданий.ДобавитьСобытие(ПараметрыЗадания);
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыЗадания.РежимЗапуска = "Регламент" Тогда
		
		РегистрыСведений.КонтроллерАсинхронныхЗаданий.ДобавитьСобытие(ПараметрыЗадания);
		
		УстановкаЗначенийЗапуска(Неопределено, Неопределено, ПараметрыЗадания.РежимЗапуска);
		
		ПреобразованнаяТаблицаДляЗаписиВКогнос = ЗаполнитьТЧДаннымиСправочников(ПараметрыЗадания.РежимЗапуска, ПараметрыЗадания.ИмяТабличнойЧасти 
		,ПреобразованнаяТаблицаДляЗаписиВКогнос);
		
		Если ТипЗнч(ПреобразованнаяТаблицаДляЗаписиВКогнос) = Тип("ТаблицаЗначений") 
			 И ПреобразованнаяТаблицаДляЗаписиВКогнос.Количество() > 0 Тогда
			
			Отказ = Ложь;
			
		Иначе
			Отказ = Истина;
			
		КонецЕсли;
		
		Если ПараметрыЗадания.Событие = Справочники.СобытияКонтроллераАсинхронныхЗаданий.ИнтеграциясКОГНОС_ОбменСправочникамиУППКогнос_ВыгрузкаСправочника 
			И Отказ = Ложь Тогда
			
			СформироватьПараметры(ПараметрыЗадания.ИмяТабличнойЧасти, ПараметрыЗадания.РежимЗапуска, ПараметрыЗадания);
			
			ДанныеФайла = ИнтеграциясКОГНОС.СформироватьФайлВыгрузкиДанныхвКОГНОС_ВыгрузкаСправочника(ПреобразованнаяТаблицаДляЗаписиВКогнос
			,ПараметрыЗадания, Отказ);
			
			ПараметрыЗадания = ИнтеграциясКОГНОС.ПолучитьКопиюСтруктуры(ПараметрыЗадания);
			
			Данные = Новый Структура;
			Данные.Вставить("ДанныеФайла", ДанныеФайла);
			ПараметрыЗадания.Вставить("Данные"	,Новый ХранилищеЗначения(Данные));
			
			ПараметрыОтправкиОповещения = ПараметрыЗадания;
			РегистрыСведений.КонтроллерАсинхронныхЗаданий.ДобавитьСобытие(ПараметрыОтправкиОповещения);
			
			ИнтеграциясКОГНОС.ОповеститьКОГНОС(ПараметрыОтправкиОповещения);
			
		КонецЕсли;
		
		Если Отказ Тогда
			
			ПараметрыОтправкиОповещения 			= ИнтеграциясКОГНОС.ПолучитьКопиюСтруктуры(ПараметрыЗадания);
			ПараметрыОтправкиОповещения.Событие 	= Справочники.СобытияКонтроллераАсинхронныхЗаданий.ИнтеграциясКОГНОС_ОшибкаIT;	
			РегистрыСведений.КонтроллерАсинхронныхЗаданий.ДобавитьСобытие(ПараметрыОтправкиОповещения);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОсновныеАлгоритмы

Функция ОпределениеСтруктурыДляПолученияНастроек() 
	
	ИмяОбъекта = Неопределено;
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь"			,Неопределено);
	СтруктураНастройки.Вставить("ИмяОбъекта"			,?(ИмяОбъекта = Неопределено, Строка(ЭтотОбъект), ИмяОбъекта));
	СтруктураНастройки.Вставить("НаименованиеНастройки"	,"НастройкаРегламентногоЗадания");
	
	Возврат СтруктураНастройки;
	
КонецФункции

// Функция - получить соответствие постфиксов табличной части//
// Параметры:
//  Постфикс - строка - имя табличной части обработки
Функция СоответствиеПостфиксовМакетам(Постфикс)
	
	СоответствиеСправочников = Новый Соответствие;
	СоответствиеСправочников.Вставить("ТЧ1"					, "УниверсальныйМакет");
	СоответствиеСправочников.Вставить("ТЧ2"					, "СправочникПодразделения");
	СоответствиеСправочников.Вставить("ТЧ3"					, "УниверсальныйМакет");
	СоответствиеСправочников.Вставить("ТЧ4"					, "СправочникНоменклатура");
	СоответствиеСправочников.Вставить("ТЧ6"					, "УниверсальныйМакет");
	СоответствиеСправочников.Вставить("ТЧ7"					, "УниверсальныйМакет");
	СоответствиеСправочников.Вставить("ТЧ8"					, "УниверсальныйМакет");
	СоответствиеСправочников.Вставить("ТЧ9"					, "УниверсальныйМакет");
	СоответствиеСправочников.Вставить("ТЧ10"				, "СправочникОрганизации");
	СоответствиеСправочников.Вставить("ТЧ11"				, "СправочникРасходыБудущихПериодов");
	
	Возврат СоответствиеСправочников.Получить(Постфикс);
	
КонецФункции // СоответствиеПостфиксовМакетам()

// Процедура - Добавить родителя
//
// Параметры:
//  ТЗ		 - Таблица значений - таблица значений результата 
//  пСсылка	 - Ссылка на группу справочника номенклатура 
//
Процедура ДобавитьРодителя(ТЗ, пСсылка) Экспорт
	
	Если ЗначениеЗаполнено(пСсылка) Тогда
		
		новпТЗ = ТЗ.Добавить();
		новпТЗ.Ссылка 				= пСсылка;
		новпТЗ.ТипСправочника 		= "6";
		новпТЗ.Код 					= пСсылка.Код;
		новпТЗ.Наименование 		= пСсылка.Наименование;
		новпТЗ.ПометкаУдаления 		= пСсылка.ПометкаУдаления;
		
		ДобавитьРодителя(ТЗ, пСсылка.Родитель)
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Выполнить пост обработку результата
//
// Параметры:
//  Постфикс		- строка - наименование табличной части 
//  ТаблицаЗначений	- Таблица значений - таблица значений до обработки 
// 
// Возвращаемое значение:
//   Таблица значений
//
Функция ВыполнитьПостОбработкуРезультата(Постфикс, ТаблицаЗначений)
	
	МассивТаблицПостОбработки 	= ПолучитьТаблицыПостОбработки();
	
	НайденноеЗначение 			= МассивТаблицПостОбработки.Найти(Постфикс);
	
	Если НайденноеЗначение <> Неопределено Тогда
		
		Если Постфикс = "ТЧ4" Тогда      // Номенклатура
			
			Родители 		= ТаблицаЗначений.СкопироватьКолонки();
			
			ИндексСообщения 			= 0;
			МаксимальныйИндексСообщения = ТаблицаЗначений.Количество();
			
			Для Каждого Строка Из ТаблицаЗначений Цикл
				
				ИндексСообщения = ИндексСообщения + 1;
				Состояние("Дополнение данных группами номенклатуры. Обработано " + ИндексСообщения + " из " + МаксимальныйИндексСообщения);
				
				Если Строка.Ссылка.Метаданные().Иерархический И Строка.Ссылка.ЭтоГруппа Тогда
					ДобавитьРодителя(Родители, Строка.Ссылка.Родитель);
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого стр Из Родители Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), стр);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
	
КонецФункции // ВыполнитьПостОбработкуРезультата()

// Функция - Получить таблицы пост обработки
// 
// Возвращаемое значение:
//  Массив с наименованиями табличных частей для которых необходимо выполнить постобработку
//
Функция ПолучитьТаблицыПостОбработки()
	
	Массив = Новый Массив;
	Массив.Добавить("ТЧ4");
	
	Возврат Массив;
	
КонецФункции // ПолучитьТаблицыПостОбработки()

// Функция - сформировать параметры
// Параметры:
//  Постфикс 	 	- строка - имя табличной части обработки
//  РежимЗапуска 	- строка - Интерактивный/Регламент
//  ПараметрыДанных - структура - содержит входящие параметры которые дополняются на выходе
Функция СформироватьПараметры(Постфикс, РежимЗапуска, ПараметрыДанных)
	
	Если РежимЗапуска = "Интерактивный"	Тогда
		
		// Параметры задания
		ПараметрыЗадания 								= Новый Структура;
		ПараметрыЗадания.Вставить("GUID"				,Новый УникальныйИдентификатор);
		ПараметрыЗадания.Вставить("Событие"				,Справочники.СобытияКонтроллераАсинхронныхЗаданий.ИнтеграциясКОГНОС_ОбменСправочникамиУППКогнос_ВыгрузкаСправочника);
		ПараметрыЗадания.Вставить("Данные"				,Новый ХранилищеЗначения(ПараметрыДанных));
		ПараметрыЗадания.Вставить("ВремяФормирования"	,ТекущаяДата());	
		ПараметрыЗадания.Вставить("Постфикс"			,Постфикс);
		ПараметрыЗадания.Вставить("РежимЗапуска"		,РежимЗапуска);
		ПараметрыЗадания.Вставить("Справочник"			,ИнтеграциясКОГНОС.СоответствиеПостфиксовСправочникам(Постфикс));
		ПараметрыЗадания.Вставить("Макет"				,СоответствиеПостфиксовМакетам(Постфикс));
		
		Возврат ПараметрыЗадания;
		
	Иначе
		
		ПараметрыДанных.Вставить("ВремяФормирования"	,ТекущаяДата());	
		ПараметрыДанных.Вставить("Постфикс"				,Постфикс);
		ПараметрыДанных.Вставить("РежимЗапуска"			,РежимЗапуска);
		ПараметрыДанных.Вставить("Справочник"			,ИнтеграциясКОГНОС.СоответствиеПостфиксовСправочникам(Постфикс));
		ПараметрыДанных.Вставить("Макет"				,СоответствиеПостфиксовМакетам(Постфикс));
		
		Возврат ПараметрыДанных;
		
	КонецЕсли;
	
КонецФункции   // СформироватьПараметры ()

// Функция - получить ТЧ данными справочников
// Параметры:
//  РежимЗапуска - строка - режим запуска Интерактивный/Регламент
//  Постфикс - строка - имя табличной части обработки
//  ПреобразованнаяТаблицаДляЗаписиВКогнос - ТаблицаЗначений - Таблица Значений с преобразованными данными
//	для загрузки в cognos
Функция ЗаполнитьТЧДаннымиСправочников(РежимЗапуска, Постфикс, ПреобразованнаяТаблицаДляЗаписиВКогнос) Экспорт
	
	Если РежимЗапуска = "Интерактивный" Тогда
		
		Для каждого ТабличначЧасть Из Метаданные().ТабличныеЧасти Цикл
			
			Если Лев(ТабличначЧасть.Имя,2)="ТЧ" Тогда
				
				ПолучитьДанныеДляОбработки(РежимЗапуска, ТабличначЧасть.Имя);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли РежимЗапуска = "Регламент" Тогда 	
		
		Возврат ПолучитьДанныеДляОбработки(РежимЗапуска, Постфикс);
				
	КонецЕсли; 
	
КонецФункции  // ЗаполнитьТЧДаннымиСправочников()

// Процедура по входящим параметрам очищает данные к обмену
// Параметры:
// Узел 		 - Узел плана обмена
// Метаданные 	 - Описание метаданных объекта
Процедура УдалитьРегистрациюИзменений(Узел, РезультатВыполненияПостроителя)
	
	Для каждого Строка Из РезультатВыполненияПостроителя Цикл
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Строка.Ссылка)
		
	КонецЦикла; 
	
КонецПроцедуры // УдалитьРегистрациюИзменений ()

// Функция возвращает структуру с дополнительными настройками, в частности,
// определяется вид соединения с узлом обмена для мониторинга объектов к обмену
//
// Параметры:
//  РежимЗапуска 		 - Строка	- Интерактивный/Регламент
Функция ПолучитьСтруктуруСДополнительнымиПараметрами(РежимЗапуска, НастройкаСПараметрами)
	
	// Дополнительные настройки для запуска
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимЗапуска", РежимЗапуска);
	ДополнительныеПараметры.Вставить("НастройкаСПараметрами", НастройкаСПараметрами);	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Процедура - Получить
//
// Параметры:
//  Постфикс 		 - Строка	- Наименование ТЧ
//  ВидИспользования - Строка 	- Интерактивный/Регламент
Функция ПолучитьДанныеДляОбработки(РежимЗапуска, Постфикс) Экспорт
	
	ПостроительОтчета = Неопределено;
	
	Выполнить("ПостроительОтчета = ПостроительОтчета_" + Постфикс + ";");
	
	ПостроительОтчета.Параметры.Вставить("РежимЗапуска", РежимЗапуска);
	
	// Запуск в пользовательском режиме
	Если РежимЗапуска = "Интерактивный" Тогда
		
		ПостроительОтчета.Параметры.Вставить("Узел", Истина);
		
		ПостроительОтчета.Выполнить();
		
		ЭтотОбъект[Постфикс].Загрузить(ВыполнитьПостОбработкуРезультата(Постфикс, ПостроительОтчета.Результат.Выгрузить()));
		
		// Запуск регламентным заданием
	ИначеЕсли РежимЗапуска = "Регламент" Тогда 
		
		СтруктураНастроекРегламентногоЗадания = ВосстановитьНастройкиРегламентногоЗадания();
		
		ПостроительОтчета.Параметры.Вставить("Узел", СтруктураНастроекРегламентногоЗадания.УзелОбмена);
		
		ПостроительОтчета.Выполнить();
		
		РезультатВыполненияПостроителя = ВыполнитьПостОбработкуРезультата(Постфикс, ПостроительОтчета.Результат.Выгрузить());
		
		//Удаление регистрации изменений на узле после чтения
		УдалитьРегистрациюИзменений(СтруктураНастроекРегламентногоЗадания.УзелОбмена
									, РезультатВыполненияПостроителя);
		
		Если РезультатВыполненияПостроителя.Количество() > 0 Тогда
			
			Возврат Обработать(Постфикс, РежимЗапуска, РезультатВыполненияПостроителя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Процедура - Обработать
//
// Параметры:
// Постфикс 					  - Строка - Наименование ТЧ
// РежимЗапуска	 				  - Строка - Режим запуска Регламент/Интерактивный
// РезультатВыполненияПостроителя - ПостроительЗапроса - Построитель запроса с не исполненными данными
Функция Обработать(Постфикс, РежимЗапуска, РезультатВыполненияПостроителя) Экспорт
	
	Если РежимЗапуска = "Интерактивный" Тогда
		
		ПараметрыДанных = Неопределено;
		
		ПараметрыДанных = СформироватьПараметры(Постфикс, РежимЗапуска, ПараметрыДанных);
		
		РезультирующаяТЗ = ЭтотОбъект[Постфикс].Выгрузить();
		
		Если РезультирующаяТЗ.Количество() > 0 Тогда
			
			ПреобразованнаяТаблицаДляЗаписиВКогнос = ОбработатьТаблицу(Постфикс, РежимЗапуска, РезультирующаяТЗ);
			
			РегламентныйЗапуск(ПараметрыДанных, ПреобразованнаяТаблицаДляЗаписиВКогнос);
			
		КонецЕсли;
		
	ИначеЕсли РежимЗапуска = "Регламент" Тогда 
		
		Возврат ОбработатьТаблицу(Постфикс, РежимЗапуска, РезультатВыполненияПостроителя);	
		
	КонецЕсли;
	
КонецФункции // Обработать ()

#КонецОбласти

#Область ОбработкаТЧТЗ
// Функция - Обработать таблицу
//
// Параметры:
// Постфикс 		 - Строка - Наименование ТЧ
// РежимЗапуска	 	 - Строка - Режим запуска Регламент/Интерактивный
// ТабличнаяЧасть	 - таблица значений 
//
// Возвращаемое значение:
// Таблица значений 
Функция ОбработатьТаблицу(Постфикс, РежимЗапуска, ТабличнаяЧасть)
	
	Результат = ЭтотОбъект[Постфикс].ВыгрузитьКолонки();
	Результат.Колонки.Удалить("НомерСтроки");
	СписокПолейТаблицы = "";
	
	Для каждого Колонка Из Результат.Колонки Цикл
		
		СписокПолейТаблицы = СписокПолейТаблицы + "ТЗ." + СтрЗаменить(Колонка.Заголовок, " ","") + " ,"+ Символы.ПС;
		
	КонецЦикла;
	
	СписокПолейТаблицы = Лев(СокрЛП(СписокПолейТаблицы), СтрДлина(СокрЛП(СписокПолейТаблицы)) - 2);	
	
	ТекстЗапроса =
	
	"ВЫБРАТЬ " + Символы.ПС + СписокПолейТаблицы + 
	
	" ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " + Символы.ПС; 
	
	СписокПолейВТ 		= СтрЗаменить(СписокПолейТаблицы, "ТЗ", "ВТ");		   
	ТексВтораяЧасть 	= 
	СписокПолейВТ 		+
	
	" ИЗ
	|	ВТ_ТЗ КАК ВТ";
	
	Текст = ТекстЗапроса + ТексВтораяЧасть; 
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("ТЗ", ТабличнаяЧасть);
	
	Если Постфикс = "ТЧ1"
		ИЛИ Постфикс = "ТЧ3"
		ИЛИ Постфикс = "ТЧ6"
		ИЛИ Постфикс = "ТЧ7"
		ИЛИ Постфикс = "ТЧ8"
		ИЛИ Постфикс = "ТЧ9" Тогда 	 
		
		ОбработаннаяТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
		
		Результат.Колонки.Добавить("GUID"			,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
		Результат.Колонки.Добавить("GUID_parent"	,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	
		Для каждого Строка Из ОбработаннаяТабличнаяЧасть Цикл
			
			новРезультат 								= Результат.Добавить();
			новРезультат.GUID							= Строка.Ссылка.УникальныйИдентификатор();		
			новРезультат.GUID_parent					= ?(ЗначениеЗаполнено(Строка.Ссылка.Родитель)
														, Строка.Ссылка.Родитель.УникальныйИдентификатор(), "");				
			новРезультат.ТипСправочника					= Строка.ТипСправочника;											
			новРезультат.Код							= Строка.Код;										
			новРезультат.Наименование					= Строка.Наименование;
			новРезультат.КодРодителя					= Строка.КодРодителя;
			новРезультат.ПометкаУдаления				= Строка.ПометкаУдаления;
			
		КонецЦикла; 
		
		Результат.Колонки.Удалить("Ссылка");
		
	Иначе
		
		Если Постфикс = "ТЧ2" Тогда
			
			Результат = ОбработчикТЧПодразделения(Запрос, Результат, Постфикс);
			
		ИначеЕсли Постфикс = "ТЧ4" Тогда 
			
			Результат = ОбработчикТЧНоменклатура(Запрос, Результат, Постфикс);
						
		ИначеЕсли Постфикс = "ТЧ7" Тогда 
			
			Результат = ОбработчикТЧХарактеристикиПомещений(Запрос, Результат, Постфикс);
			
		ИначеЕсли Постфикс = "ТЧ10" Тогда 
			
			Результат = ОбработчикТЧОрганизации(Запрос, Результат, Постфикс);
			
		ИначеЕсли Постфикс = "ТЧ11" Тогда 
			
			Результат = ОбработчикТЧРасходыБудущихПериодов(Запрос, Результат, Постфикс);
					
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Обработать ТЧ организации
//
// Параметры:
// Запрос 		  	 - Запрос - Запрос из параметрами для выполнения в процедуре
// Результат	 	 - Таблица значений - Структура табличной части
// Постфикс	 		 - Строка - Наименование ТЧ
//
// Возвращаемое значение:
// Таблица значений 
Функция ОбработчикТЧОрганизации(Запрос, Результат, Постфикс)
	
	ОбработаннаяТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("GUID"								,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	Результат.Колонки.Добавить("GUIDВидДеятельности"				,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));	
	
	Для каждого Строка Из ОбработаннаяТабличнаяЧасть Цикл
		
		новРезультат 								= Результат.Добавить();
		новРезультат.GUID							= Строка.Ссылка.УникальныйИдентификатор();
		новРезультат.ТипСправочника					= Строка.ТипСправочника;
		новРезультат.Код							= Строка.Код;
		новРезультат.Наименование					= Строка.Наименование;
		новРезультат.ПометкаУдаления				= Строка.ПометкаУдаления;
		новРезультат.GUIDВидДеятельности			= Строка.ВидДеятельности.УникальныйИдентификатор();
		новРезультат.ЮрФизлицо						= Строка.ЮрФизлицо;
		новРезультат.СистемаНалогообложения			= Строка.СистемаНалогообложения;
		новРезультат.ИНН							= Строка.ИНН;
		новРезультат.КодОКОПФ						= Строка.КодОКОПФ;
		новРезультат.ТекущийСтатус					= Строка.ТекущийСтатус;
		
	КонецЦикла; 
	
	Результат.Колонки.Удалить("Ссылка");
	Результат.Колонки.Удалить("ВидДеятельности");
	
	Возврат Результат;
	
КонецФункции  // ОбработчикТЧОрганизации ()

// Функция - Обработать ТЧ Характеристики помещений
//
// Параметры:
// Запрос 		  	 - Запрос - Запрос из параметрами для выполнения в процедуре
// Результат	 	 - Таблица значений - Структура табличной части
// Постфикс	 		 - Строка - Наименование ТЧ
//
// Возвращаемое значение:
// Таблица значений 
Функция ОбработчикТЧХарактеристикиПомещений(Запрос, Результат, Постфикс)
	
	ОбработаннаяТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("GUID", 			   Новый ОписаниеТипов("Строка"));
	
	Для каждого Строка Из ОбработаннаяТабличнаяЧасть Цикл
		
		новРезультат 								= Результат.Добавить();
		новРезультат.GUID							= Строка.Ссылка.УникальныйИдентификатор();
		новРезультат.ТипСправочника					= Строка.ТипСправочника;
		новРезультат.Код							= Строка.Код;
		новРезультат.Наименование					= Строка.Наименование;
		новРезультат.КодРодителя					= Строка.КодРодителя;
		новРезультат.ПометкаУдаления				= Строка.ПометкаУдаления;
		
	КонецЦикла; 
	
	Результат.Колонки.Удалить("Ссылка");
	
	Возврат Результат;
	
КонецФункции

// Функция - Обработать ТЧ контрагенты
//
// Параметры:
// Запрос 		  	 - Запрос - Запрос из параметрами для выполнения в процедуре
// Результат	 	 - Таблица значений - Структура табличной части
// Постфикс	 		 - Строка - Наименование ТЧ
//
// Возвращаемое значение:
// Таблица значений 
Функция ОбработчикТЧКонтрагенты(Запрос, Результат, Постфикс)
	
	ОбработаннаяТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("GUID"			  ,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	
	Для каждого Строка Из ОбработаннаяТабличнаяЧасть Цикл
		
		новРезультат 								= Результат.Добавить();
		новРезультат.GUID							= Строка.Ссылка.УникальныйИдентификатор();
		новРезультат.ТипСправочника					= Строка.ТипСправочника;
		новРезультат.Код							= Строка.Код;
		новРезультат.Наименование					= Строка.Наименование;
		новРезультат.ИНН							= Строка.ИНН;
		новРезультат.ГоловнойКонтрагент				= Строка.ГоловнойКонтрагент;
		
	КонецЦикла; 
	
	Результат.Колонки.Удалить("Ссылка");
	
	Возврат Результат;
	
КонецФункции // ОбработчикТЧКонтрагенты ()

// Функция - Обработать ТЧ номенклатура
//
// Параметры:
// Запрос 		  	 - Запрос - Запрос из параметрами для выполнения в процедуре
// Результат	 	 - Таблица значений - Структура табличной части
// Постфикс	 		 - Строка - Наименование ТЧ
//
// Возвращаемое значение:
// Таблица значений 
Функция ОбработчикТЧНоменклатура(Запрос, Результат, Постфикс)
	
	ОбработаннаяТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("GUID"			  ,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	Результат.Колонки.Добавить("GUID_parent"	  ,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	
	Для каждого Строка Из ОбработаннаяТабличнаяЧасть Цикл
		
		новРезультат 								= Результат.Добавить();
		новРезультат.GUID							= Строка.Ссылка.УникальныйИдентификатор();
		новРезультат.ТипСправочника					= Строка.ТипСправочника;
		новРезультат.Код							= Строка.Код;
		новРезультат.Наименование					= Строка.Наименование;
		новРезультат.КодСтатьиЗатрат				= Строка.КодСтатьиЗатрат;
		новРезультат.ПометкаУдаления				= Строка.ПометкаУдаления;
		новРезультат.СтатьяЗатрат					= Строка.СтатьяЗатрат;
		новРезультат.Код							= Строка.Код;
		новРезультат.ДатаОткрытия					= Строка.ДатаОткрытия;
		
		Если ЗначениеЗаполнено(Строка.Ссылка.Родитель) Тогда
			новРезультат.GUID_parent					= Строка.Ссылка.Родитель.УникальныйИдентификатор();
		Иначе
			новРезультат.GUID_parent 					= "";
		КонецЕсли; 
		
	КонецЦикла; 
	
	Результат.Колонки.Удалить("Ссылка");
	
	Возврат Результат;
	
КонецФункции  // ОбработчикТЧНоменклатура()

// Функция - Обработать ТЧ подразделения
//
// Параметры:
// Запрос 		  	 - Запрос - Запрос из параметрами для выполнения в процедуре
// Результат	 	 - Таблица значений - Структура табличной части
// Постфикс	 		 - Строка - Наименование ТЧ
//
// Возвращаемое значение:
// Таблица значений 
Функция ОбработчикТЧПодразделения(Запрос, Результат, Постфикс)
	
	ОбработаннаяТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("GUID", 							,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	Результат.Колонки.Добавить("GUID_parent"					,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	Результат.Колонки.Добавить("GUIDОсновногоПодразделения"		,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	
	Для каждого Строка Из ОбработаннаяТабличнаяЧасть Цикл
		
		новРезультат 								= Результат.Добавить();
		новРезультат.GUID							= Строка.Ссылка.УникальныйИдентификатор();	
		новРезультат.КодРодителя 					= Строка(Строка.Ссылка.Регион.УникальныйИдентификатор());
		новРезультат.Код							= Строка.Код;
		новРезультат.ТипСправочника					= Строка.ТипСправочника;																					
		новРезультат.Наименование					= Строка.Наименование;
		новРезультат.УбытокЭкономия					= Строка.УбытокЭкономия;
		новРезультат.GUIDОсновногоПодразделения 	= ?(ЗначениеЗаполнено(Строка.ОсновноеПодразделение), 
		Строка(Строка.ОсновноеПодразделение.УникальныйИдентификатор()), "");
		
		Если Строка.ПодчиненГоловномуПодразделению Тогда
			новРезультат.GUID_parent = Строка.Ссылка.Регион.УникальныйИдентификатор();
		Иначе
			новРезультат.GUID_parent = Строка.Ссылка.Родитель.УникальныйИдентификатор();
		КонецЕсли;				
		
	КонецЦикла; 
	
	Результат.Колонки.Удалить("Ссылка");
	
	Возврат Результат;
	
КонецФункции  // ОбработчикТЧПодразделения()

// Функция - Обработать ТЧ Расходы будущих периодов
//
// Параметры:
// Запрос 		  	 - Запрос - Запрос из параметрами для выполнения в процедуре
// Результат	 	 - Таблица значений - Структура табличной части
// Постфикс	 		 - Строка - Наименование ТЧ
//
// Возвращаемое значение:
// Таблица значений 
Функция ОбработчикТЧРасходыБудущихПериодов(Запрос, Результат, Постфикс)
	
	ОбработаннаяТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("GUID"								,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	Результат.Колонки.Добавить("cfo_GUID"							,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	Результат.Колонки.Добавить("cfo_org_GUID"						,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	Результат.Колонки.Добавить("cfo_org_name"						,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	Результат.Колонки.Добавить("stat_GUID"							,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	
	Для каждого Строка Из ОбработаннаяТабличнаяЧасть Цикл
		
		новРезультат 								= Результат.Добавить();
		новРезультат.GUID							= Строка.Ссылка.УникальныйИдентификатор();
		новРезультат.Наименование					= Строка.Наименование;
		новРезультат.Код							= Строка.Код;
		новРезультат.СпособПризнанияРасходов		= Строка.СпособПризнанияРасходов;
		новРезультат.ДатаНачалаСписания				= Строка.ДатаНачалаСписания;
		новРезультат.ДатаОкончанияСписания			= Строка.ДатаОкончанияСписания;
		новРезультат.Сумма							= Строка.Сумма;
		новРезультат.cfo_GUID                    	= ?(ЗначениеЗаполнено(Строка.Подразделение), Строка.Подразделение.УникальныйИдентификатор(), "");
		новРезультат.cfo_org_GUID                   = ?(ЗначениеЗаполнено(Строка.ПодразделениеОрганизации), Строка.ПодразделениеОрганизации.УникальныйИдентификатор(), "");
		новРезультат.cfo_org_name                   = ?(ЗначениеЗаполнено(Строка.ПодразделениеОрганизации), Строка(Строка.ПодразделениеОрганизации), "");
		новРезультат.stat_GUID                    	= ?(ЗначениеЗаполнено(Строка.СтатьяЗатрат), Строка.СтатьяЗатрат.УникальныйИдентификатор(), "");	
		новРезультат.Выбытие						= Строка.Выбытие;
		новРезультат.ДатаВыбытия					= Строка.ДатаВыбытия;
		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции  // ОбработчикТЧРасходыБудущихПериодов()

#КонецОбласти 

#Область РазделИнициализации

мВосстанавливатьНастройкиПриОткрытии 	= Истина;
мНазваниеОтчета 						= ЭтотОбъект.Метаданные().Представление();

мТекущийПользователь					= глЗначениеПеременной("глТекущийПользователь");

мРегламентнаяНастройка = Новый Структура;
мРегламентнаяНастройка.Вставить("Пользователь"	,Неопределено);

#КонецОбласти